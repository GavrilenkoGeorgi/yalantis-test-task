{"version":3,"sources":["reducers/employeesReducer.js","store/store.js","services/employees.js","utils/localStorageHelper.js","utils/constants.js","utils/helpers.js","components/CheckBox.jsx","components/EmployeesByChar.jsx","components/EmployeesList.jsx","components/BirthdaysList.jsx","components/Employees.jsx","App.jsx","index.js"],"names":["setEmployeesArray","data","dispatch","a","type","employeesReducer","state","employees","action","find","group","letter","updatedEmployees","map","employee","id","checked","store","createStore","composeWithDevTools","applyMiddleware","thunk","getAllEmployees","axios","get","response","window","localStorage","setItem","JSON","stringify","propertyName","storedEmployees","parse","getItem","months","sortByProperty","arrayOfObjects","sort","b","getMonthFromDate","dateOfBirth","date","Date","getMonth","CheckBox","props","label","rest","htmlFor","EmployeesByChar","list","useDispatch","checkEmployee","setEmployeeCheckedStatus","className","length","lastName","firstName","name","aria-label","onChange","EmployeesList","groups","BirtdayList","useSelector","useState","checkedUsers","setCheckedUsers","groupedEmployees","setGroupedEmployees","useEffect","result","push","selectCheckedUsers","grouped","reduce","acc","item","month","dob","Object","values","groupByMonth","indexOf","formatDateOfBirth","birthday","day","getDate","year","getFullYear","person","Employees","employeeGroups","setEmployeeGroups","prepareUserData","useCallback","arrayOfEmployees","groupByLetter","emptyGroups","alphabet","toUpperCase","split","emptyGroup","getEmptyGroups","addCheckBoxField","concat","expirationDate","localStorageHelper","now","employeesService","then","days","parsedData","catch","error","console","message","savedState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b94971aa.chunk.js","sourcesContent":["const employeesReducer = (state = {\n\temployees: null\n}, action) => {\n\n\tswitch (action.type) {\n\tcase 'SET_EMPLOYEES_ARRAY':\n\t\treturn { ...state, employees: action.data }\n\tcase 'CHECK_EMPLOYEE': {\n\t\tconst { data } = action\n\t\t// get group of employees by letter\n\t\tconst { employees } =\n\t\t\tstate.employees.find(group => group.letter === data.letter)\n\t\t// update employee\n\t\tconst updatedEmployees = employees.map(employee =>\n\t\t\temployee.id !== data.id\n\t\t\t\t? employee\n\t\t\t\t: { ...employee, checked: !employee.checked })\n\n\t\treturn { ...state, employees: state.employees.map(group =>\n\t\t\tgroup.letter !== data.letter ? group : { ...group, employees: updatedEmployees }) }\n\t}\n\tdefault:\n\t\treturn state\n\t}\n}\n\n/**\n * Set employees array\n */\nexport const setEmployeesArray = data => {\n\treturn async dispatch => {\n\t\tdispatch ({\n\t\t\ttype: 'SET_EMPLOYEES_ARRAY',\n\t\t\tdata\n\t\t})\n\t}\n}\n\n/**\n * Check employee\n */\nexport const setEmployeeCheckedStatus = (letter, id) => {\n\treturn async dispatch => {\n\t\tdispatch ({\n\t\t\ttype: 'CHECK_EMPLOYEE',\n\t\t\tdata: {\n\t\t\t\tletter,\n\t\t\t\tid\n\t\t\t}\n\t\t})\n\t}\n}\n\nexport default employeesReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport employeesReducer from '../reducers/employeesReducer'\n\nconst store = createStore(\n\temployeesReducer,\n\tcomposeWithDevTools(\n\t\tapplyMiddleware(thunk))\n)\n\nexport default store\n","import axios from 'axios'\nconst serviceUrl = 'https://yalantis-react-school-api.yalantis.com/api/task0/users'\n\n/**\n * Get list of all employees\n */\n\nconst getAllEmployees = async () => {\n\tconst response = await axios.get(serviceUrl)\n\treturn response\n\t// return await axios.get(serviceUrl)\n}\n\nexport default { getAllEmployees }\n","const setEmployeesObject = data => window.localStorage.setItem('storedEmployees', JSON.stringify(data))\n\nconst removeEmployeesObject = () => window.localStorage.removeItem('storedEmployees')\n\nconst updateEmployeesObject = (data) => {\n\tconst storedEmployees = JSON.parse(window.localStorage.getItem('storedEmployees'))\n\twindow.localStorage\n\t\t.setItem('storedEmployees', JSON.stringify({ ...storedEmployees, employees: data }))\n}\n\nconst getEmployeesObjectProperty = propertyName => {\n\tconst storedEmployees = JSON.parse(window.localStorage.getItem('storedEmployees'))\n\tif (storedEmployees) return storedEmployees[propertyName]\n\telse return ''\n}\n\nexport default {\n\tsetEmployeesObject,\n\tgetEmployeesObjectProperty,\n\tremoveEmployeesObject,\n\tupdateEmployeesObject\n}\n","// eslint-disable-next-line\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nexport const letters = 'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n","import { letters, months } from './constants'\n\nexport const sortByProperty = (propertyName, arrayOfObjects) => {\n\treturn arrayOfObjects.sort(function(a, b){\n\t\tif(a[propertyName] < b[propertyName]) { return -1 }\n\t\tif(a[propertyName] > b[propertyName]) { return 1 }\n\t\treturn 0\n\t})\n}\n\nexport const sortByMonth = (arrayOfObjects) => {\n\treturn arrayOfObjects.sort((a, b) => months.indexOf(a.month) - months.indexOf(b.month))\n}\n\nexport const expiresInDays = days => {\n\tconst day = 86400000\n\treturn Date.now() + day * days\n}\n\nexport const getEmptyGroups = arrayOfObjects => {\n\tconst alphabet = letters.toUpperCase().split(' ')\n\tconst emptyGroups = []\n\n\tfor (let letter of alphabet) {\n\t\tlet index = arrayOfObjects.map(item => item.letter).indexOf(letter)\n\t\tif (index < 0) {\n\t\t\tconst emptyGroup = {\n\t\t\t\tletter,\n\t\t\t\temployees: []\n\t\t\t}\n\t\t\temptyGroups.push(emptyGroup)\n\t\t}\n\t}\n\treturn emptyGroups\n}\n\nexport const groupByLetter = arrayOfObjects => { // this!\n\n\tlet data = arrayOfObjects.reduce((acc, item) => {\n\t\tlet letter = item.lastName[0]\n\t\tif(!acc[letter]) acc[letter] = { letter, employees: [item] }\n\t\telse acc[letter].employees.push(item)\n\t\treturn acc\n\t}, {})\n\n\tconst result = Object.values(data)\n\treturn result\n}\n\nexport const groupByMonth = arrayOfObjects => { // and this!\n\n\tlet data = arrayOfObjects.reduce((acc, item) => {\n\t\tlet month = getMonthFromDate(item.dob)\n\t\tif(!acc[month]) acc[month] = { month, employees: [item] }\n\t\telse acc[month].employees.push(item)\n\t\treturn acc\n\t}, {})\n\n\tconst result = Object.values(data)\n\treturn result\n}\n\nexport const addCheckBoxField = arrayOfObjects => {\n\tfor (let item of arrayOfObjects) {\n\t\tfor (let person of item.employees) {\n\t\t\tperson.checked = false\n\t\t}\n\t}\n\treturn arrayOfObjects\n}\n\nexport const selectCheckedUsers = (arrayOfObjects) => {\n\tconst result = []\n\n\tfor (let group of arrayOfObjects) {\n\t\tif (group.employees.length) {\n\t\t\tfor (let employee of group.employees) {\n\t\t\t\tif (employee.checked) result.push(employee)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result\n}\n\nexport const getMonthFromDate = dateOfBirth => {\n\tconst date = new Date(dateOfBirth)\n\treturn months[date.getMonth()]\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst CheckBox = props => {\n\n\tconst { label, ...rest } = props\n\n\treturn <>\n\t\t<input\n\t\t\ttype=\"checkbox\"\n\t\t\t{ ...rest }\n\t\t/>\n\t\t<label htmlFor={rest.id}>\n\t\t\t{label}\n\t\t</label>\n\t</>\n}\n\nCheckBox.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tname: PropTypes.string.isRequired,\n\tchecked: PropTypes.bool.isRequired,\n\tlabel: PropTypes.string\n}\n\nexport default CheckBox\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { setEmployeeCheckedStatus } from '../reducers/employeesReducer'\n\nimport CheckBox from './CheckBox'\n\nconst EmployeesByChar = ({ letter, list }) => {\n\n\tconst dispatch = useDispatch()\n\n\tconst checkEmployee = (letter, id) => {\n\t\tdispatch(setEmployeeCheckedStatus(letter, id))\n\t}\n\n\treturn <>\n\t\t<div className=\"employees-by-letter\">\n\t\t\t<h2>{letter}</h2>\n\t\t\t<ul className=\"employee-list\">\n\t\t\t\t{list.length\n\t\t\t\t\t? list.map(employee =>\n\t\t\t\t\t\t<li key={employee.id}>\n\t\t\t\t\t\t\t<span className=\"employee-name\">\n\t\t\t\t\t\t\t\t{employee.lastName} {employee.firstName}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span className=\"checkbox-container\">\n\t\t\t\t\t\t\t\t<CheckBox\n\t\t\t\t\t\t\t\t\tid={employee.id}\n\t\t\t\t\t\t\t\t\tname={employee.id}\n\t\t\t\t\t\t\t\t\tchecked={employee.checked}\n\t\t\t\t\t\t\t\t\tlabel={employee.checked ? 'checked' : ''}\n\t\t\t\t\t\t\t\t\taria-label={`check-employee-${employee.lastName}`}\n\t\t\t\t\t\t\t\t\tonChange={() => checkEmployee(letter, employee.id)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</li>)\n\t\t\t\t\t: <>-----</>\n\t\t\t\t}\n\t\t\t</ul>\n\t\t</div>\n\t</>\n}\n\nEmployeesByChar.propTypes = {\n\tletter: PropTypes.string.isRequired,\n\tlist: PropTypes.array.isRequired\n}\n\nexport default EmployeesByChar\n","import React from 'react'\nimport EmployeesByChar from './EmployeesByChar'\n\nconst EmployeesList = ({ groups }) => {\n\treturn <>\n\t\t<section className=\"employees-section\">\n\t\t\t<h1>Employees</h1>\n\t\t\t{groups && groups.map(group =>\n\t\t\t\t<EmployeesByChar\n\t\t\t\t\tkey={group.letter}\n\t\t\t\t\tletter={group.letter}\n\t\t\t\t\tlist={group.employees}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</section>\n\t</>\n}\n\nexport default EmployeesList\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { selectCheckedUsers, sortByMonth,\n\tgroupByMonth, getMonthFromDate } from '../utils/helpers'\n\nconst BirtdayList = () => {\n\n\tconst employees = useSelector(state => state.employees)\n\tconst [checkedUsers, setCheckedUsers] = useState([])\n\tconst [groupedEmployees, setGroupedEmployees] = useState([])\n\n\tuseEffect(() => {\n\t\tif (employees) {\n\t\t\tsetCheckedUsers(selectCheckedUsers(employees))\n\t\t}\n\t}, [employees])\n\n\tuseEffect(() => {\n\t\tif (checkedUsers.length) {\n\t\t\tconst grouped = groupByMonth(checkedUsers)\n\t\t\tsetGroupedEmployees(sortByMonth(grouped))\n\t\t} else setGroupedEmployees([])\n\t}, [checkedUsers])\n\n\tconst formatDateOfBirth = date => {\n\t\tconst birthday = new Date(Date.parse(date))\n\n\t\t// to get \"31 March, 1977 year\" as stated in the requirement\n\t\tconst day = birthday.getDate()\n\t\tconst month = getMonthFromDate(birthday)\n\t\tconst year = birthday.getFullYear()\n\n\t\treturn <span>{day} {month}, {year} year</span>\n\n\t\t// but I'd rather do it like this:\n\t\t// \"March 31, 1977 year\"\n\t\t/* const options = {\n\t\t\tyear: 'numeric',\n\t\t\tmonth: 'long',\n\t\t\tday: 'numeric'\n\t\t}\n\t\treturn <span>{birthday.toLocaleString('en-us', options)} year</span> */\n\t}\n\n\treturn <section className=\"birthdays-section\">\n\t\t<h1>Employees birthday</h1>\n\t\t{groupedEmployees.length\n\t\t\t? groupedEmployees.map(group =>\n\t\t\t\t<div key={group.month} className=\"month-group\">\n\t\t\t\t\t<h2>{group.month}</h2>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{group.employees.map(person =>\n\t\t\t\t\t\t\t<li key={person.id}>\n\t\t\t\t\t\t\t\t{person.lastName} {person.firstName}{' '}\n\t\t\t\t\t\t\t\t- {formatDateOfBirth(person.dob)}\n\t\t\t\t\t\t\t</li>)}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t)\n\t\t\t: <span>No selected employees</span>}\n\t</section>\n}\n\nexport default BirtdayList\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { setEmployeesArray } from '../reducers/employeesReducer'\nimport employeesService from '../services/employees'\nimport localStorageHelper from '../utils/localStorageHelper'\nimport { sortByProperty, getEmptyGroups, groupByLetter,\n\texpiresInDays, addCheckBoxField } from '../utils/helpers'\n\nimport EmployeesList from './EmployeesList'\nimport BirtdaysList from './BirthdaysList'\n\nconst Employees = () => {\n\n\tconst dispatch = useDispatch()\n\tconst employees = useSelector(state => state.employees)\n\tconst [employeeGroups, setEmployeeGroups] = useState(null)\n\n\tconst prepareUserData = useCallback((arrayOfEmployees) => {\n\t\tconst sorted = sortByProperty('lastName', arrayOfEmployees)\n\t\tconst grouped = groupByLetter(sorted)\n\t\tconst withCheckBoxes = addCheckBoxField(grouped)\n\t\tconst emptyGroups = getEmptyGroups(withCheckBoxes)\n\t\tconst allGroups = sortByProperty('letter', grouped.concat(emptyGroups))\n\n\t\treturn allGroups\n\t}, [])\n\n\tuseEffect(() => {\n\t\tconst expirationDate = localStorageHelper.getEmployeesObjectProperty('expirationDate')\n\t\tif (!expirationDate || (Date.now() > expirationDate)) {\n\t\t\t// not set or expired\n\t\t\temployeesService.getAllEmployees()\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t\tconst parsedData = prepareUserData(data)\n\t\t\t\t\tdispatch(setEmployeesArray(parsedData))\n\t\t\t\t\tlocalStorageHelper.setEmployeesObject({\n\t\t\t\t\t\temployees: parsedData,\n\t\t\t\t\t\texpirationDate: expiresInDays(7)\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tconsole.error(error.message)\n\t\t\t\t})\n\t\t} else { // restore saved state\n\t\t\tconst savedState = localStorageHelper.getEmployeesObjectProperty('employees')\n\t\t\tdispatch(setEmployeesArray(savedState))\n\t\t}\n\t}, [dispatch, prepareUserData])\n\n\tuseEffect(() => {\n\t\t// on change, update view\n\t\tsetEmployeeGroups(employees)\n\t\t// save current state to LS\n\t\tlocalStorageHelper.updateEmployeesObject(employees)\n\t}, [employees] )\n\n\treturn <>\n\t\t{employees && <>\n\t\t\t<EmployeesList groups={employeeGroups}/>\n\t\t\t<BirtdaysList />\n\t\t</>}\n\t</>\n\n}\n\nexport default Employees\n","import React from 'react'\nimport { Employees } from './components'\n\nexport const App = () => {\n\treturn <Employees />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/store'\nimport './css/index.css'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}