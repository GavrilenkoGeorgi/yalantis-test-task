{"version":3,"sources":["reducers/employeesReducer.js","store/store.js","services/employees.js","services/apiUrl.js","utils/localStorageHelper.js","utils/constants.js","utils/helpers.js","components/CheckBox.jsx","components/EmployeesByChar.jsx","components/EmployeesList.jsx","components/BirthdaysList.jsx","components/Employees.jsx","App.jsx","index.js"],"names":["setEmployeesArray","data","dispatch","a","type","employeesReducer","state","employees","action","find","group","letter","updatedEmployees","map","employee","id","checked","store","createStore","composeWithDevTools","applyMiddleware","thunk","getAllEmployees","axios","get","response","console","error","status","statusText","window","localStorage","setItem","JSON","stringify","propertyName","storedEmployees","parse","getItem","months","sortByProperty","arrayOfObjects","Error","Array","isArray","sort","b","expiresInDays","days","isFinite","Date","now","getMonthFromDate","dateOfBirth","date","getMonth","CheckBox","props","label","rest","htmlFor","EmployeesByChar","list","useDispatch","checkEmployee","setEmployeeCheckedStatus","className","length","lastName","firstName","name","aria-label","onChange","EmployeesList","groups","BirtdaysList","useSelector","useState","checkedEmployees","setCheckedEmployees","groupedEmployees","setGroupedEmployees","useEffect","result","push","selectCheckedEmployees","grouped","reduce","acc","item","month","dob","Object","values","groupByMonth","indexOf","sortByMonth","formatDateOfBirth","birthday","day","getDate","year","getFullYear","person","Employees","employeeGroups","setEmployeeGroups","prepareUserData","useCallback","arrayOfEmployees","withCheckBoxes","addCheckBoxField","groupByLetter","emptyGroups","alphabet","toUpperCase","split","emptyGroup","getEmptyGroups","concat","expirationDate","localStorageHelper","employeesService","then","parsedData","catch","savedState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61bd496a.chunk.js","sourcesContent":["const employeesReducer = (state = {\n\temployees: null\n}, action) => {\n\n\tswitch (action.type) {\n\tcase 'SET_EMPLOYEES_ARRAY':\n\t\treturn { ...state, employees: action.data }\n\tcase 'CHECK_EMPLOYEE': {\n\t\tconst { data } = action\n\t\t// get group of employees by letter\n\t\tconst { employees } =\n\t\t\tstate.employees.find(group => group.letter === data.letter)\n\t\t// update employee\n\t\tconst updatedEmployees = employees.map(employee =>\n\t\t\temployee.id !== data.id\n\t\t\t\t? employee\n\t\t\t\t: { ...employee, checked: !employee.checked })\n\n\t\treturn { ...state, employees: state.employees.map(group =>\n\t\t\tgroup.letter !== data.letter ? group : { ...group, employees: updatedEmployees }) }\n\t}\n\tdefault:\n\t\treturn state\n\t}\n}\n\n/**\n * Set employees array\n */\nexport const setEmployeesArray = data => {\n\treturn async dispatch => {\n\t\tdispatch ({\n\t\t\ttype: 'SET_EMPLOYEES_ARRAY',\n\t\t\tdata\n\t\t})\n\t}\n}\n\n/**\n * Check employee\n */\nexport const setEmployeeCheckedStatus = (letter, id) => {\n\treturn async dispatch => {\n\t\tdispatch ({\n\t\t\ttype: 'CHECK_EMPLOYEE',\n\t\t\tdata: {\n\t\t\t\tletter,\n\t\t\t\tid\n\t\t\t}\n\t\t})\n\t}\n}\n\nexport default employeesReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport employeesReducer from '../reducers/employeesReducer'\n\nconst store = createStore(\n\temployeesReducer,\n\tcomposeWithDevTools(\n\t\tapplyMiddleware(thunk))\n)\n\nexport default store\n","import axios from 'axios'\nimport { apiUrl } from './apiUrl'\n\n/**\n * Get list of all employees\n */\n\nconst getAllEmployees = async () => {\n\ttry {\n\t\tconst { data } = await axios.get(apiUrl)\n\t\treturn data\n\t} catch (error) {\n\t\tif (error.response) {\n\t\t\tconst { response } = error\n\t\t\tconsole.error(`Error getting data from API: ${response.status} - ${response.statusText} `)\n\t\t} else console.error(error)\n\t}\n}\n\nexport default { getAllEmployees }\n","export const apiUrl = 'https://yalantis-react-school-api.yalantis.com/api/task0/users'\n","const setEmployeesObject = data => window.localStorage.setItem('storedEmployees', JSON.stringify(data))\n\nconst removeEmployeesObject = () => window.localStorage.removeItem('storedEmployees')\n\nconst updateEmployeesObject = (data) => {\n\tconst storedEmployees = JSON.parse(window.localStorage.getItem('storedEmployees'))\n\twindow.localStorage\n\t\t.setItem('storedEmployees', JSON.stringify({ ...storedEmployees, employees: data }))\n}\n\nconst getEmployeesObjectProperty = propertyName => {\n\tconst storedEmployees = JSON.parse(window.localStorage.getItem('storedEmployees'))\n\tif (storedEmployees) return storedEmployees[propertyName]\n\telse return ''\n}\n\nexport default {\n\tsetEmployeesObject,\n\tgetEmployeesObjectProperty,\n\tremoveEmployeesObject,\n\tupdateEmployeesObject\n}\n","/* eslint-disable */\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nexport const letters = 'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n","import { letters, months } from './constants'\n\n/**\n * Sort array of objects by property\n *\n * @param {string} propertyName - Name of the property to sort by\n * @param {Object[]} arrayOfObjects - Objects to sort\n * @throws - Will throw an error if some args are missing\n *\n * @returns {Object[]} - sorted array of objects\n */\n\nexport const sortByProperty = (propertyName, arrayOfObjects) => {\n\tif (typeof propertyName !== 'string')\n\t\tthrow new Error('Can\\'t sort, property name is missing.')\n\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t sort, array of objects is missing.')\n\n\treturn arrayOfObjects.sort(function(a, b) {\n\t\tif(a[propertyName] < b[propertyName]) { return -1 }\n\t\tif(a[propertyName] > b[propertyName]) { return 1 }\n\t\treturn 0\n\t})\n}\n\n/**\n * Sort array of objects by month property\n * @param {Object[]} arrayOfObjects - Array of employee groups\n * @param {string} month - Month name of the group\n * @throws Error if \"days\" arg is missing or invalid\n *\n * @return {Object[]} - Sorted array of objects\n */\n\nexport const sortByMonth = arrayOfObjects => {\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t sort, array of objects is missing.')\n\n\treturn arrayOfObjects.sort((a, b) => months.indexOf(a.month) - months.indexOf(b.month))\n}\n\n/**\n * Generate expiry date\n * @param {number} days\n * @throws Error if \"days\" arg is missing or invalid\n *\n * @returns {number} - Date in milliseconds\n */\n\nexport const expiresInDays = days => {\n\tif (!days || typeof days !== 'number' || !isFinite(days))\n\t\tthrow new Error('\"Days\" arg must be a finite number.')\n\tconst day = 86400000\n\treturn Date.now() + day * days\n}\n\n/**\n * Select empty groups by letter to the array of grouped employees\n * @param {Object[]} arrayOfObjects - Array of employee groups\n * @param {string} letter - Letter of the alphabet of the group\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {Object[]} - Array of empty groups to add to employee groups array\n */\n\nexport const getEmptyGroups = arrayOfObjects => {\n\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t select missing groups, array of groups is missing.')\n\n\tconst alphabet = letters.toUpperCase().split(' ')\n\tconst emptyGroups = []\n\n\tfor (let letter of alphabet) {\n\t\tlet index = arrayOfObjects.map(item => item.letter).indexOf(letter)\n\t\tif (index < 0) {\n\t\t\tconst emptyGroup = {\n\t\t\t\tletter,\n\t\t\t\temployees: []\n\t\t\t}\n\t\t\temptyGroups.push(emptyGroup)\n\t\t}\n\t}\n\treturn emptyGroups\n}\n\n/**\n * Group array of employees by first letter of their lastName\n * @param {Object[]} arrayOfObjects - Array of employee objects\n * @param {Object} employee - Employee object\n * @param {string} employee.id - Employee id\n * @param {string} employee.firstName - Employee first name\n * @param {string} employee.lastName - Employee last name\n * @param {string} employee.dob - Employee date of birth\n *\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {Object[]} - Grouped array of employee objects\n */\n\nexport const groupByLetter = arrayOfObjects => { // this!\n\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t group by last name first letter, array of employee objects is missing.')\n\n\tlet data = arrayOfObjects.reduce((acc, item) => {\n\t\tlet letter = item.lastName[0]\n\t\tif(!acc[letter]) acc[letter] = { letter, employees: [item] }\n\t\telse acc[letter].employees.push(item)\n\t\treturn acc\n\t}, {})\n\n\tconst result = Object.values(data)\n\treturn result\n}\n\n/**\n * Group array of employees by birthday month\n * @param {Object[]} arrayOfObjects - Array of employee objects\n * @param {Object} employee - Employee object\n * @param {string} employee.id - Employee id\n * @param {string} employee.firstName - Employee first name\n * @param {string} employee.lastName - Employee last name\n * @param {string} employee.dob - Employee date of birth\n * @param {boolean} employee.checked - Employee \"checked\" status\n *\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {Object[]} - Grouped array of employee objects\n */\n\nexport const groupByMonth = arrayOfObjects => { // and this!\n\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t group by month, array of employee objects is missing.')\n\n\tlet data = arrayOfObjects.reduce((acc, item) => {\n\t\tlet month = getMonthFromDate(item.dob)\n\t\tif(!acc[month]) acc[month] = { month, employees: [item] }\n\t\telse acc[month].employees.push(item)\n\t\treturn acc\n\t}, {})\n\n\tconst result = Object.values(data)\n\treturn result\n}\n\n/**\n * Add checkboxes to the employees objects\n * @param {Object[]} arrayOfObjects - Array of employees\n * @param {Object} employee - Employee object\n *\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {Object[]} - Array of grouped employee objects with added checkboxes\n */\n\nexport const addCheckBoxField = arrayOfObjects => {\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t add checkboxes, array of employee objects is missing.')\n\n\tfor (let item of arrayOfObjects) {\n\t\titem.checked = false\n\t}\n\treturn arrayOfObjects\n}\n\n/**\n * Selects only checked employees from array of employee objects\n * @param {Object[]} arrayOfObjects - Array of grouped employees\n * @param {Object} group - Grouped of employees\n * @param {Object} group.letter - Group letter\n * @param {Object[]} group.employees - Group of eployees for current letter\n * @param {Object} employee - Employee object\n * @param {Object} employee.id - Employee id\n * @param {string} employee.firstName - Employee first name\n * @param {string} employee.lastName - Employee last name\n * @param {string} employee.dob - Employee date of birth\n * @param {string} employee.cheked - Employee 'checked' status\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {Object[]} - Array of employee with 'true' checked prop\n */\n\nexport const selectCheckedEmployees = arrayOfObjects => {\n\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t select checked employees, array of employee objects is missing.')\n\n\tconst result = []\n\tfor (let group of arrayOfObjects) {\n\t\tif (group.employees.length) {\n\t\t\tfor (let employee of group.employees) {\n\t\t\t\tif (employee.checked) result.push(employee)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result\n}\n\n/**\n * Get full month name from the date string\n * @param {string} dateOfBirth - Date in ISO format\n *\n * @returns {string} - Full month name\n */\n\nexport const getMonthFromDate = dateOfBirth => {\n\tconst date = new Date(dateOfBirth)\n\treturn months[date.getMonth()]\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst CheckBox = props => {\n\n\tconst { label, ...rest } = props\n\n\treturn <>\n\t\t<input\n\t\t\ttype=\"checkbox\"\n\t\t\t{ ...rest }\n\t\t/>\n\t\t<label htmlFor={rest.id}>\n\t\t\t{label}\n\t\t</label>\n\t</>\n}\n\nCheckBox.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tname: PropTypes.string.isRequired,\n\tchecked: PropTypes.bool.isRequired,\n\tlabel: PropTypes.string\n}\n\nexport default CheckBox\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { setEmployeeCheckedStatus } from '../reducers/employeesReducer'\n\nimport CheckBox from './CheckBox'\n\nconst EmployeesByChar = ({ letter, list }) => {\n\n\tconst dispatch = useDispatch()\n\n\tconst checkEmployee = (letter, id) => {\n\t\tdispatch(setEmployeeCheckedStatus(letter, id))\n\t}\n\n\treturn <div className=\"employees-by-letter\">\n\t\t<h2>{letter}</h2>\n\t\t<ul className=\"employee-list\">\n\t\t\t{list.length\n\t\t\t\t? list.map(employee =>\n\t\t\t\t\t<li key={employee.id}>\n\t\t\t\t\t\t<span className=\"employee-name\">\n\t\t\t\t\t\t\t{employee.lastName} {employee.firstName}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"checkbox-container\">\n\t\t\t\t\t\t\t<CheckBox\n\t\t\t\t\t\t\t\tid={employee.id}\n\t\t\t\t\t\t\t\tname={employee.id}\n\t\t\t\t\t\t\t\tchecked={employee.checked}\n\t\t\t\t\t\t\t\tlabel={employee.checked ? 'checked' : ''}\n\t\t\t\t\t\t\t\taria-label={`check-employee-${employee.lastName}`}\n\t\t\t\t\t\t\t\tonChange={() => checkEmployee(letter, employee.id)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</li>)\n\t\t\t\t: <>-----</>\n\t\t\t}\n\t\t</ul>\n\t</div>\n}\n\nEmployeesByChar.propTypes = {\n\tletter: PropTypes.string.isRequired,\n\tlist: PropTypes.array.isRequired\n}\n\nexport default EmployeesByChar\n","import React from 'react'\nimport EmployeesByChar from './EmployeesByChar'\n\nconst EmployeesList = ({ groups }) => {\n\treturn <section className=\"employees-section\">\n\t\t<h1>Employees</h1>\n\t\t<div className=\"employees-list\">\n\t\t\t{groups && groups.map(group =>\n\t\t\t\t<EmployeesByChar\n\t\t\t\t\tkey={group.letter}\n\t\t\t\t\tletter={group.letter}\n\t\t\t\t\tlist={group.employees}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t</section>\n}\n\nexport default EmployeesList\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { selectCheckedEmployees, sortByMonth,\n\tgroupByMonth, getMonthFromDate } from '../utils/helpers'\n\nconst BirtdaysList = () => {\n\n\tconst employees = useSelector(state => state.employees)\n\tconst [checkedEmployees, setCheckedEmployees] = useState([])\n\tconst [groupedEmployees, setGroupedEmployees] = useState([])\n\n\tuseEffect(() => {\n\t\tif (employees) {\n\t\t\tsetCheckedEmployees(selectCheckedEmployees(employees))\n\t\t}\n\t}, [employees])\n\n\tuseEffect(() => {\n\t\tif (checkedEmployees.length) {\n\t\t\tconst grouped = groupByMonth(checkedEmployees)\n\t\t\tsetGroupedEmployees(sortByMonth(grouped))\n\t\t} else setGroupedEmployees([])\n\t}, [checkedEmployees])\n\n\tconst formatDateOfBirth = date => {\n\t\tconst birthday = new Date(Date.parse(date))\n\n\t\t// to get \"31 March, 1977 year\" as stated in the requirement\n\t\tconst day = birthday.getDate()\n\t\tconst month = getMonthFromDate(birthday)\n\t\tconst year = birthday.getFullYear()\n\n\t\treturn <span>{day} {month}, {year} year</span>\n\n\t\t// but I'd rather do it like this:\n\t\t// \"March 31, 1977 year\"\n\t\t/* const options = {\n\t\t\tyear: 'numeric',\n\t\t\tmonth: 'long',\n\t\t\tday: 'numeric'\n\t\t}\n\t\treturn <span>{birthday.toLocaleString('en-us', options)} year</span> */\n\t}\n\n\treturn <section className=\"birthdays-section\">\n\t\t<h1>Employees birthday</h1>\n\t\t<div className=\"birthdays-list\">\n\t\t\t{groupedEmployees.length\n\t\t\t\t? groupedEmployees.map(group =>\n\t\t\t\t\t<div key={group.month} className=\"month-group\">\n\t\t\t\t\t\t<h2>{group.month}</h2>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{group.employees.map(person =>\n\t\t\t\t\t\t\t\t<li key={person.id}>\n\t\t\t\t\t\t\t\t\t<span className=\"employee-birthday-name\">\n\t\t\t\t\t\t\t\t\t\t{person.lastName} {person.firstName} -{' '}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t{formatDateOfBirth(person.dob)}\n\t\t\t\t\t\t\t\t</li>)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t\t: <p className=\"no-emps-to-show-message\">\n\t\t\t\t\t\tNo selected employees\n\t\t\t\t</p>\n\t\t\t}\n\t\t</div>\n\t</section>\n}\n\nexport default BirtdaysList\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { setEmployeesArray } from '../reducers/employeesReducer'\nimport employeesService from '../services/employees'\nimport localStorageHelper from '../utils/localStorageHelper'\nimport { sortByProperty, getEmptyGroups, groupByLetter,\n\texpiresInDays, addCheckBoxField } from '../utils/helpers'\n\nimport EmployeesList from './EmployeesList'\nimport BirtdaysList from './BirthdaysList'\n\nconst Employees = () => {\n\n\tconst dispatch = useDispatch()\n\tconst employees = useSelector(state => state.employees)\n\tconst [employeeGroups, setEmployeeGroups] = useState(null)\n\n\tconst prepareUserData = useCallback(arrayOfEmployees => {\n\t\tconst withCheckBoxes = addCheckBoxField(arrayOfEmployees)\n\t\tconst sorted = sortByProperty('lastName', withCheckBoxes)\n\t\tconst grouped = groupByLetter(sorted)\n\t\tconst emptyGroups = getEmptyGroups(grouped)\n\t\tconst allGroups = sortByProperty('letter', grouped.concat(emptyGroups))\n\n\t\treturn allGroups\n\t}, [])\n\n\tuseEffect(() => {\n\t\tconst expirationDate = localStorageHelper.getEmployeesObjectProperty('expirationDate')\n\t\tif (!expirationDate || (Date.now() > expirationDate)) {\n\t\t\t// not set or expired\n\t\t\temployeesService.getAllEmployees()\n\t\t\t\t.then(data => {\n\t\t\t\t\tconst parsedData = prepareUserData(data)\n\t\t\t\t\tdispatch(setEmployeesArray(parsedData))\n\t\t\t\t\tlocalStorageHelper.setEmployeesObject({\n\t\t\t\t\t\temployees: parsedData,\n\t\t\t\t\t\texpirationDate: expiresInDays(7)\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tconsole.error(error)\n\t\t\t\t})\n\t\t} else { // restore saved state\n\t\t\tconst savedState = localStorageHelper.getEmployeesObjectProperty('employees')\n\t\t\tdispatch(setEmployeesArray(savedState))\n\t\t}\n\t}, [dispatch, prepareUserData])\n\n\tuseEffect(() => {\n\t\t// on change, update view\n\t\tsetEmployeeGroups(employees)\n\t\t// save current state to LS\n\t\tlocalStorageHelper.updateEmployeesObject(employees)\n\t}, [employees] )\n\n\treturn <>\n\t\t{employees && <>\n\t\t\t<EmployeesList groups={employeeGroups}/>\n\t\t\t<BirtdaysList />\n\t\t</>}\n\t</>\n\n}\n\nexport default Employees\n","import React from 'react'\nimport { Employees } from './components'\n\nexport const App = () => {\n\treturn <Employees />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/store'\nimport './css/index.css'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}