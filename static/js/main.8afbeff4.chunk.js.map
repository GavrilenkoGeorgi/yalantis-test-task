{"version":3,"sources":["reducers/employeesReducer.js","store/store.js","services/employees.js","services/apiUrl.js","utils/localStorageHelper.js","utils/constants.js","utils/helpers.js","utils/errorHandling.js","components/CheckBox.jsx","components/EmployeesByChar.jsx","components/EmployeesList.jsx","components/BirthdaysList.jsx","components/Employees.jsx","components/Home.jsx","App.jsx","index.js"],"names":["setEmployeesArray","data","dispatch","a","type","employeesReducer","state","employees","action","find","group","groupName","updatedEmployees","map","employee","id","checked","store","createStore","composeWithDevTools","applyMiddleware","thunk","getAllEmployees","axios","get","response","console","error","status","statusText","window","localStorage","setItem","JSON","stringify","propertyName","storedEmployees","parse","getItem","months","sortByProperty","arrayOfObjects","Error","Array","isArray","sort","b","expiresInDays","days","isFinite","Date","now","getFirstLetterOfString","str","length","getMonthFromDate","dateOfBirth","date","getMonth","groupByProperty","grouper","propName","includes","getGrouperFunc","reduce","acc","item","push","message","showErrorMessage","Object","values","CheckBox","props","label","rest","htmlFor","EmployeesByChar","list","useDispatch","checkEmployee","setEmployeeCheckedStatus","className","lastName","firstName","name","aria-label","onChange","EmployeesList","groups","BirtdaysList","useSelector","useState","checkedEmployees","setCheckedEmployees","groupedEmployees","setGroupedEmployees","useEffect","result","selectCheckedEmployees","grouped","indexOf","sortByMonth","formatDateOfBirth","birthday","day","getDate","month","year","getFullYear","person","dob","Employees","employeeGroups","setEmployeeGroups","prepareUserData","useCallback","arrayOfEmployees","withCheckBoxes","addCheckBoxField","sorted","emptyGroups","alphabet","toUpperCase","split","letter","emptyGroup","getEmptyGroups","concat","expirationDate","localStorageHelper","employeesService","then","parsedData","catch","savedState","Home","to","App","exact","path","component","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.8afbeff4.chunk.js","sourcesContent":["const employeesReducer = (state = {\n\temployees: null\n}, action) => {\n\n\tswitch (action.type) {\n\tcase 'SET_EMPLOYEES_ARRAY':\n\t\treturn { ...state, employees: action.data }\n\tcase 'CHECK_EMPLOYEE': {\n\t\tconst { data } = action\n\t\t// get group of employees by group name\n\t\tconst { employees } =\n\t\t\tstate.employees.find(group => group.groupName === data.groupName)\n\t\t// update employee\n\t\tconst updatedEmployees = employees.map(employee =>\n\t\t\temployee.id !== data.id\n\t\t\t\t? employee\n\t\t\t\t: { ...employee, checked: !employee.checked })\n\n\t\treturn { ...state, employees: state.employees.map(group =>\n\t\t\tgroup.groupName !== data.groupName ? group : { ...group, employees: updatedEmployees }) }\n\t}\n\tdefault:\n\t\treturn state\n\t}\n}\n\n/**\n * Set employees array\n */\nexport const setEmployeesArray = data => {\n\treturn async dispatch => {\n\t\tdispatch ({\n\t\t\ttype: 'SET_EMPLOYEES_ARRAY',\n\t\t\tdata\n\t\t})\n\t}\n}\n\n/**\n * Check employee\n */\nexport const setEmployeeCheckedStatus = (groupName, id) => {\n\treturn async dispatch => {\n\t\tdispatch ({\n\t\t\ttype: 'CHECK_EMPLOYEE',\n\t\t\tdata: {\n\t\t\t\tgroupName,\n\t\t\t\tid\n\t\t\t}\n\t\t})\n\t}\n}\n\nexport default employeesReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport employeesReducer from '../reducers/employeesReducer'\n\nconst store = createStore(\n\temployeesReducer,\n\tcomposeWithDevTools(\n\t\tapplyMiddleware(thunk))\n)\n\nexport default store\n","import axios from 'axios'\nimport { apiUrl } from './apiUrl'\n\n/**\n * Get list of all employees\n */\n\nconst getAllEmployees = async () => {\n\ttry {\n\t\tconst { data } = await axios.get(apiUrl)\n\t\treturn data\n\t} catch (error) {\n\t\tif (error.response) {\n\t\t\tconst { response } = error\n\t\t\tconsole.error(`Error getting data from API: ${response.status} - ${response.statusText} `)\n\t\t} else console.error(error)\n\t}\n}\n\nexport default { getAllEmployees }\n","export const apiUrl = 'https://yalantis-react-school-api.yalantis.com/api/task0/users'\n","const setEmployeesObject = data => window.localStorage.setItem('storedEmployees', JSON.stringify(data))\n\nconst removeEmployeesObject = () => window.localStorage.removeItem('storedEmployees')\n\nconst updateEmployeesObject = (data) => {\n\tconst storedEmployees = JSON.parse(window.localStorage.getItem('storedEmployees'))\n\twindow.localStorage\n\t\t.setItem('storedEmployees', JSON.stringify({ ...storedEmployees, employees: data }))\n}\n\nconst getEmployeesObjectProperty = propertyName => {\n\tconst storedEmployees = JSON.parse(window.localStorage.getItem('storedEmployees'))\n\tif (storedEmployees) return storedEmployees[propertyName]\n\telse return ''\n}\n\nexport default {\n\tsetEmployeesObject,\n\tgetEmployeesObjectProperty,\n\tremoveEmployeesObject,\n\tupdateEmployeesObject\n}\n","/* eslint-disable */\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nexport const letters = 'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n","import { letters, months } from './constants'\nimport { showErrorMessage } from './errorHandling'\n\n/**\n * Sort array of objects by property\n *\n * @param {string} propertyName - Name of the property to sort by\n * @param {Object[]} arrayOfObjects - Objects to sort\n * @throws - Will throw an error if some args are missing\n *\n * @returns {Object[]} - sorted array of objects\n */\n\nexport const sortByProperty = (propertyName, arrayOfObjects) => {\n\tif (typeof propertyName !== 'string')\n\t\tthrow new Error('Can\\'t sort, property name is missing.')\n\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t sort, array of objects is missing.')\n\n\treturn arrayOfObjects.sort(function(a, b) {\n\t\tif(a[propertyName] < b[propertyName]) { return -1 }\n\t\tif(a[propertyName] > b[propertyName]) { return 1 }\n\t\treturn 0\n\t})\n}\n\n/**\n * Sort array of objects by month property\n * @param {Object[]} arrayOfObjects - Array of employee groups\n * @param {string} month - Month name of the group\n * @throws Error if \"days\" arg is missing or invalid\n *\n * @return {Object[]} - Sorted array of objects\n */\n\nexport const sortByMonth = arrayOfObjects => {\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t sort, array of objects is missing.')\n\n\treturn arrayOfObjects.sort((a, b) => months.indexOf(a.groupName) - months.indexOf(b.groupName))\n}\n\n/**\n * Generate expiry date\n * @param {number} days\n * @throws Error if \"days\" arg is missing or invalid\n *\n * @returns {number} - Date in milliseconds\n */\n\nexport const expiresInDays = days => {\n\tif (!days || typeof days !== 'number' || !isFinite(days))\n\t\tthrow new Error('\"Days\" arg must be a finite number.')\n\tconst day = 86400000\n\treturn Date.now() + day * days\n}\n\n/**\n * Select empty groups by letter to the array of grouped employees\n * @param {Object[]} arrayOfObjects - Array of employee groups\n * @param {string} letter - Letter of the alphabet of the group\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {Object[]} - Array of empty groups to add to employee groups array\n */\n\nexport const getEmptyGroups = arrayOfObjects => {\n\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t select missing groups, array of groups is missing.')\n\n\tconst alphabet = letters.toUpperCase().split(' ')\n\tconst emptyGroups = []\n\n\tfor (let letter of alphabet) {\n\t\tlet index = arrayOfObjects.map(item => item.groupName).indexOf(letter)\n\t\tif (index < 0) {\n\t\t\tconst emptyGroup = {\n\t\t\t\tgroupName: letter,\n\t\t\t\temployees: []\n\t\t\t}\n\t\t\temptyGroups.push(emptyGroup)\n\t\t}\n\t}\n\treturn emptyGroups\n}\n\n/**\n * Get grouper function based on property name\n * @param {string} propName - Prop name\n *\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {function(): void} Grouper function\n */\n\nconst getGrouperFunc = propName => {\n\tlet grouper\n\tconst validGroupingProps = ['lastName', 'dob']\n\n\tif (!validGroupingProps.includes(propName))\n\t\tthrow new Error(`Can't group by ${propName}`)\n\n\tpropName === 'lastName'\n\t\t? grouper = getFirstLetterOfString\n\t\t: grouper = getMonthFromDate\n\n\treturn grouper\n}\n\n/**\n * Get first letter of the string\n * @param {string} str - String to get first letter from\n *\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {string} First char of the given string\n */\n\nconst getFirstLetterOfString = str => {\n\tif (!str.length)\n\t\tthrow new Error('String must be at least 1 char long.')\n\treturn str[0]\n}\n\n/**\n * Get full month name from the date string\n * @param {string} dateOfBirth - Date in ISO format\n *\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {string} - Full month name\n */\n\nexport const getMonthFromDate = dateOfBirth => {\n\tconst date = new Date(dateOfBirth)\n\tif (!date)\n\t\tthrow new Error('Date string must be in ISO format.')\n\treturn months[date.getMonth()]\n}\n\n/**\n * Group array of employees by grouped property\n * @param {string} propertyName - Name of the property to sort by\n * @param {Object[]} arrayOfObjects - Array of employee objects\n * @param {Object} group - Group object\n * @param {string} group.groupName - Name of the group\n * @param {string} group.employees - Array of employees for the current group\n *\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {Object[]} - Grouped array of employee objects\n */\n\nexport const groupByProperty = (propertyName, arrayOfObjects) => {\n\tconst grouper = getGrouperFunc(propertyName)\n\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t group by prop, array of objects is missing.')\n\n\tlet data = arrayOfObjects.reduce((acc, item) => {\n\t\ttry {\n\t\t\tlet groupName = grouper(item[propertyName])\n\t\t\tif(!acc[groupName]) acc[groupName] = { groupName, employees: [item] }\n\t\t\telse acc[groupName].employees.push(item)\n\t\t\treturn acc\n\t\t} catch (error) {\n\t\t\tshowErrorMessage(error)\n\t\t}\n\t}, {})\n\n\tconst result = Object.values(data)\n\treturn result\n}\n\n/**\n * Add checkboxes to the employees objects\n * @param {Object[]} arrayOfObjects - Array of employees\n * @param {Object} employee - Employee object\n *\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {Object[]} - Array of grouped employee objects with added checkboxes\n */\n\nexport const addCheckBoxField = arrayOfObjects => {\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t add checkboxes, array of employee objects is missing.')\n\n\tfor (let item of arrayOfObjects) {\n\t\titem.checked = false\n\t}\n\treturn arrayOfObjects\n}\n\n/**\n * Selects only checked employees from array of employee objects\n * @param {Object[]} arrayOfObjects - Array of grouped employees\n * @param {Object} group - Grouped of employees\n * @param {Object} group.letter - Group letter\n * @param {Object[]} group.employees - Group of eployees for current letter\n * @param {Object} employee - Employee object\n * @param {Object} employee.id - Employee id\n * @param {string} employee.firstName - Employee first name\n * @param {string} employee.lastName - Employee last name\n * @param {string} employee.dob - Employee date of birth\n * @param {string} employee.cheked - Employee 'checked' status\n * @throws - Will throw an error if arg is missing or invalid\n *\n * @returns {Object[]} - Array of employee with 'true' checked prop\n */\n\nexport const selectCheckedEmployees = arrayOfObjects => {\n\n\tif (!arrayOfObjects || !Array.isArray(arrayOfObjects))\n\t\tthrow new Error('Can\\'t select checked employees, array of employee objects is missing.')\n\n\tconst result = []\n\tfor (let group of arrayOfObjects) {\n\t\tif (group.employees.length) {\n\t\t\tfor (let employee of group.employees) {\n\t\t\t\tif (employee.checked) result.push(employee)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result\n}\n","export const showErrorMessage = error => console.error(error.message)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst CheckBox = props => {\n\n\tconst { label, ...rest } = props\n\n\treturn <>\n\t\t<input\n\t\t\ttype=\"checkbox\"\n\t\t\t{ ...rest }\n\t\t/>\n\t\t<label htmlFor={rest.id}>\n\t\t\t{label}\n\t\t</label>\n\t</>\n}\n\nCheckBox.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tname: PropTypes.string.isRequired,\n\tchecked: PropTypes.bool.isRequired,\n\tlabel: PropTypes.string\n}\n\nexport default CheckBox\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { setEmployeeCheckedStatus } from '../reducers/employeesReducer'\n\nimport CheckBox from './CheckBox'\n\nconst EmployeesByChar = ({ groupName, list }) => {\n\n\tconst dispatch = useDispatch()\n\n\tconst checkEmployee = (groupName, id) => {\n\t\tdispatch(setEmployeeCheckedStatus(groupName, id))\n\t}\n\n\treturn <div className=\"employees-by-letter\">\n\t\t<h2>{groupName}</h2>\n\t\t<ul className=\"employee-list\">\n\t\t\t{list.length\n\t\t\t\t? list.map(employee =>\n\t\t\t\t\t<li key={employee.id}>\n\t\t\t\t\t\t<span className=\"employee-name\">\n\t\t\t\t\t\t\t{employee.lastName} {employee.firstName}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"checkbox-container\">\n\t\t\t\t\t\t\t<CheckBox\n\t\t\t\t\t\t\t\tid={employee.id}\n\t\t\t\t\t\t\t\tname={employee.id}\n\t\t\t\t\t\t\t\tchecked={employee.checked}\n\t\t\t\t\t\t\t\tlabel={employee.checked ? 'checked' : ''}\n\t\t\t\t\t\t\t\taria-label={`check-employee-${employee.lastName}`}\n\t\t\t\t\t\t\t\tonChange={() => checkEmployee(groupName, employee.id)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</li>)\n\t\t\t\t: <>-----</>\n\t\t\t}\n\t\t</ul>\n\t</div>\n}\n\nEmployeesByChar.propTypes = {\n\tgroupName: PropTypes.string.isRequired,\n\tlist: PropTypes.array.isRequired\n}\n\nexport default EmployeesByChar\n","import React from 'react'\nimport EmployeesByChar from './EmployeesByChar'\n\nconst EmployeesList = ({ groups }) => {\n\treturn <section className=\"employees-section\">\n\t\t<h1>Employees</h1>\n\t\t<div className=\"employees-list\">\n\t\t\t{groups && groups.map(group =>\n\t\t\t\t<EmployeesByChar\n\t\t\t\t\tkey={group.groupName}\n\t\t\t\t\tgroupName={group.groupName}\n\t\t\t\t\tlist={group.employees}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t</section>\n}\n\nexport default EmployeesList\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { selectCheckedEmployees, sortByMonth, groupByProperty,\n\tgetMonthFromDate } from '../utils/helpers'\n\nconst BirtdaysList = () => {\n\n\tconst employees = useSelector(state => state.employees)\n\tconst [checkedEmployees, setCheckedEmployees] = useState([])\n\tconst [groupedEmployees, setGroupedEmployees] = useState([])\n\n\tuseEffect(() => {\n\t\tif (employees) {\n\t\t\tsetCheckedEmployees(selectCheckedEmployees(employees))\n\t\t}\n\t}, [employees])\n\n\tuseEffect(() => {\n\t\tif (checkedEmployees.length) {\n\t\t\tconst grouped = groupByProperty('dob', checkedEmployees)\n\t\t\tsetGroupedEmployees(sortByMonth(grouped))\n\t\t} else setGroupedEmployees([])\n\t}, [checkedEmployees])\n\n\tconst formatDateOfBirth = date => {\n\t\tconst birthday = new Date(Date.parse(date))\n\n\t\t// to get \"31 March, 1977 year\" as stated in the requirement\n\t\tconst day = birthday.getDate()\n\t\tconst month = getMonthFromDate(birthday)\n\t\tconst year = birthday.getFullYear()\n\n\t\treturn <span>{day} {month}, {year} year</span>\n\n\t\t// but I'd rather do it like this:\n\t\t// \"March 31, 1977 year\"\n\t\t/* const options = {\n\t\t\tyear: 'numeric',\n\t\t\tmonth: 'long',\n\t\t\tday: 'numeric'\n\t\t}\n\t\treturn <span>{birthday.toLocaleString('en-us', options)} year</span> */\n\t}\n\n\treturn <section className=\"birthdays-section\">\n\t\t<h1>Employees birthday</h1>\n\t\t<div className=\"birthdays-list\">\n\t\t\t{groupedEmployees.length\n\t\t\t\t? groupedEmployees.map(group =>\n\t\t\t\t\t<div key={group.groupName} className=\"month-group\">\n\t\t\t\t\t\t<h2>{group.groupName}</h2>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{group.employees.map(person =>\n\t\t\t\t\t\t\t\t<li key={person.id}>\n\t\t\t\t\t\t\t\t\t<span className=\"employee-birthday-name\">\n\t\t\t\t\t\t\t\t\t\t{person.lastName} {person.firstName} -{' '}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t{formatDateOfBirth(person.dob)}\n\t\t\t\t\t\t\t\t</li>)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t\t: <p className=\"no-emps-to-show-message\">\n\t\t\t\t\t\tNo selected employees\n\t\t\t\t</p>\n\t\t\t}\n\t\t</div>\n\t</section>\n}\n\nexport default BirtdaysList\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { setEmployeesArray } from '../reducers/employeesReducer'\nimport employeesService from '../services/employees'\nimport localStorageHelper from '../utils/localStorageHelper'\nimport { sortByProperty, getEmptyGroups, groupByProperty,\n\texpiresInDays, addCheckBoxField } from '../utils/helpers'\n\nimport EmployeesList from './EmployeesList'\nimport BirtdaysList from './BirthdaysList'\n\nconst Employees = () => {\n\n\tconst dispatch = useDispatch()\n\tconst employees = useSelector(state => state.employees)\n\tconst [employeeGroups, setEmployeeGroups] = useState(null)\n\n\tconst prepareUserData = useCallback(arrayOfEmployees => {\n\t\tconst withCheckBoxes = addCheckBoxField(arrayOfEmployees)\n\t\tconst sorted = sortByProperty('lastName', withCheckBoxes)\n\t\tconst grouped = groupByProperty('lastName', sorted)\n\t\tconst emptyGroups = getEmptyGroups(grouped)\n\t\tconst allGroups = sortByProperty('groupName', grouped.concat(emptyGroups))\n\n\t\treturn allGroups\n\t}, [])\n\n\tuseEffect(() => {\n\t\tconst expirationDate = localStorageHelper.getEmployeesObjectProperty('expirationDate')\n\t\tif (!expirationDate || (Date.now() > expirationDate)) {\n\t\t\t// not set or expired\n\t\t\temployeesService.getAllEmployees()\n\t\t\t\t.then(data => {\n\t\t\t\t\tconst parsedData = prepareUserData(data)\n\t\t\t\t\tdispatch(setEmployeesArray(parsedData))\n\t\t\t\t\tlocalStorageHelper.setEmployeesObject({\n\t\t\t\t\t\temployees: parsedData,\n\t\t\t\t\t\texpirationDate: expiresInDays(7)\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tconsole.error(error)\n\t\t\t\t})\n\t\t} else { // restore saved state\n\t\t\tconst savedState = localStorageHelper.getEmployeesObjectProperty('employees')\n\t\t\tdispatch(setEmployeesArray(savedState))\n\t\t}\n\t}, [dispatch, prepareUserData])\n\n\tuseEffect(() => {\n\t\t// on change, update view\n\t\tsetEmployeeGroups(employees)\n\t\t// save current state to LS\n\t\tlocalStorageHelper.updateEmployeesObject(employees)\n\t}, [employees] )\n\n\treturn <>\n\t\t{employees && <>\n\t\t\t<EmployeesList groups={employeeGroups}/>\n\t\t\t<BirtdaysList />\n\t\t</>}\n\t</>\n\n}\n\nexport default Employees\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Home = () => {\n\treturn <section className=\"home-container\">\n\t\t<h1>Тестове завдання для Yalantis React.js School (online)</h1>\n\t\t<article className=\"greeting\">\n\t\t\t<Link to=\"/employees\">Employees page</Link>\n\t\t\t<p>(Завантажити список співробітників з сервера,\n\t\t\t\tпри потраплянні на сторінку <Link to=\"/employees\">employees</Link>)</p>\n\t\t</article>\n\t</section>\n}\n\nexport default Home\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { Home, Employees } from './components'\n\nexport const App = () => {\n\treturn <Switch>\n\t\t<Route exact path=\"/\" component={Home} />\n\t\t<Route exact path=\"/employees\" component={Employees} />\n\t</Switch>\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/store'\nimport './css/index.css'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<BrowserRouter basename=\"/yalantis-test-task\">\n\t\t\t<Provider store={store}>\n\t\t\t\t<App />\n\t\t\t</Provider>\n\t\t</BrowserRouter>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}