{"version":3,"sources":["reducers/employeesReducer.js","store/store.js","components/Home.jsx","services/employees.js","utils/localStorageHelper.js","utils/constants.js","utils/helpers.js","components/CheckBox.jsx","components/EmployeesByChar.jsx","components/EmployeesList.jsx","components/BirthdaysList.jsx","components/Employees.jsx","App.jsx","index.js"],"names":["setEmployeesArray","data","dispatch","a","type","employeesReducer","state","employees","action","find","group","letter","updatedEmployees","map","employee","id","checked","store","createStore","composeWithDevTools","applyMiddleware","thunk","Home","className","to","getAllEmployees","axios","get","response","window","localStorage","setItem","JSON","stringify","propertyName","storedEmployees","parse","getItem","months","sortByProperty","arrayOfObjects","sort","b","getMonthFromDate","dateOfBirth","date","Date","getMonth","CheckBox","props","label","rest","htmlFor","EmployeesByChar","list","useDispatch","checkEmployee","setEmployeeCheckedStatus","length","lastName","firstName","name","aria-label","onChange","EmployeesList","groups","BirtdayList","useSelector","useState","checkedUsers","setCheckedUsers","groupedEmployees","setGroupedEmployees","useEffect","result","push","selectCheckedUsers","grouped","reduce","acc","item","month","dob","Object","values","groupByMonth","indexOf","formatDateOfBirth","birthday","day","getDate","year","getFullYear","person","Employees","employeeGroups","setEmployeeGroups","prepareUserData","useCallback","arrayOfEmployees","groupByLetter","emptyGroups","alphabet","toUpperCase","split","emptyGroup","getEmptyGroups","addCheckBoxField","concat","expirationDate","localStorageHelper","now","employeesService","then","days","parsedData","catch","error","console","message","savedState","style","display","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ea6699e.chunk.js","sourcesContent":["const employeesReducer = (state = {\n\temployees: null\n}, action) => {\n\n\tswitch (action.type) {\n\tcase 'SET_EMPLOYEES_ARRAY':\n\t\treturn { ...state, employees: action.data }\n\tcase 'CHECK_EMPLOYEE': {\n\t\tconst { data } = action\n\t\t// get group of employees by letter\n\t\tconst { employees } =\n\t\t\tstate.employees.find(group => group.letter === data.letter)\n\t\t// update employee\n\t\tconst updatedEmployees = employees.map(employee =>\n\t\t\temployee.id !== data.id\n\t\t\t\t? employee\n\t\t\t\t: { ...employee, checked: !employee.checked })\n\n\t\treturn { ...state, employees: state.employees.map(group =>\n\t\t\tgroup.letter !== data.letter ? group : { ...group, employees: updatedEmployees }) }\n\t}\n\tdefault:\n\t\treturn state\n\t}\n}\n\n/**\n * Set employees array\n */\nexport const setEmployeesArray = data => {\n\treturn async dispatch => {\n\t\tdispatch ({\n\t\t\ttype: 'SET_EMPLOYEES_ARRAY',\n\t\t\tdata\n\t\t})\n\t}\n}\n\n/**\n * Check employee\n */\nexport const setEmployeeCheckedStatus = (letter, id) => {\n\treturn async dispatch => {\n\t\tdispatch ({\n\t\t\ttype: 'CHECK_EMPLOYEE',\n\t\t\tdata: {\n\t\t\t\tletter,\n\t\t\t\tid\n\t\t\t}\n\t\t})\n\t}\n}\n\nexport default employeesReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\n\nimport employeesReducer from '../reducers/employeesReducer'\n\nconst store = createStore(\n\temployeesReducer,\n\tcomposeWithDevTools(\n\t\tapplyMiddleware(thunk))\n)\n\nexport default store\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Home = () => {\n\treturn <section className=\"home-container\">\n\t\t<h1>Тестове завдання для Yalantis React.js School (online)</h1>\n\t\t<article className=\"greeting\">\n\t\t\t<Link to=\"/employees\">Employees page</Link>\n\t\t\t<p>(Завантажити список співробітників з сервера,\n\t\t\t\tпри потраплянні на сторінку <Link to=\"/employees\">employees</Link>)</p>\n\t\t</article>\n\t</section>\n}\n\nexport default Home\n","import axios from 'axios'\nconst serviceUrl = 'https://yalantis-react-school-api.yalantis.com/api/task0/users'\n\n/**\n * Get list of all employees\n */\n\nconst getAllEmployees = async () => {\n\tconst response = await axios.get(serviceUrl)\n\treturn response\n\t// return await axios.get(serviceUrl)\n}\n\nexport default { getAllEmployees }\n","const setEmployeesObject = data => window.localStorage.setItem('storedEmployees', JSON.stringify(data))\n\nconst removeEmployeesObject = () => window.localStorage.removeItem('storedEmployees')\n\nconst updateEmployeesObject = (data) => {\n\tconst storedEmployees = JSON.parse(window.localStorage.getItem('storedEmployees'))\n\twindow.localStorage\n\t\t.setItem('storedEmployees', JSON.stringify({ ...storedEmployees, employees: data }))\n}\n\nconst getEmployeesObjectProperty = propertyName => {\n\tconst storedEmployees = JSON.parse(window.localStorage.getItem('storedEmployees'))\n\tif (storedEmployees) return storedEmployees[propertyName]\n\telse return ''\n}\n\nexport default {\n\tsetEmployeesObject,\n\tgetEmployeesObjectProperty,\n\tremoveEmployeesObject,\n\tupdateEmployeesObject\n}\n","// eslint-disable-next-line\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nexport const letters = 'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n","import { letters, months } from './constants'\n\nexport const sortByProperty = (propertyName, arrayOfObjects) => {\n\treturn arrayOfObjects.sort(function(a, b){\n\t\tif(a[propertyName] < b[propertyName]) { return -1 }\n\t\tif(a[propertyName] > b[propertyName]) { return 1 }\n\t\treturn 0\n\t})\n}\n\nexport const sortByMonth = (arrayOfObjects) => {\n\treturn arrayOfObjects.sort((a, b) => months.indexOf(a.month) - months.indexOf(b.month))\n}\n\nexport const expiresInDays = days => {\n\tconst day = 86400000\n\treturn Date.now() + day * days\n}\n\nexport const getEmptyGroups = arrayOfObjects => {\n\tconst alphabet = letters.toUpperCase().split(' ')\n\tconst emptyGroups = []\n\n\tfor (let letter of alphabet) {\n\t\tlet index = arrayOfObjects.map(item => item.letter).indexOf(letter)\n\t\tif (index < 0) {\n\t\t\tconst emptyGroup = {\n\t\t\t\tletter,\n\t\t\t\temployees: []\n\t\t\t}\n\t\t\temptyGroups.push(emptyGroup)\n\t\t}\n\t}\n\treturn emptyGroups\n}\n\nexport const groupByLetter = arrayOfObjects => { // this!\n\n\tlet data = arrayOfObjects.reduce((acc, item) => {\n\t\tlet letter = item.lastName[0]\n\t\tif(!acc[letter]) acc[letter] = { letter, employees: [item] }\n\t\telse acc[letter].employees.push(item)\n\t\treturn acc\n\t}, {})\n\n\tconst result = Object.values(data)\n\treturn result\n}\n\nexport const groupByMonth = arrayOfObjects => { // and this!\n\n\tlet data = arrayOfObjects.reduce((acc, item) => {\n\t\tlet month = getMonthFromDate(item.dob)\n\t\tif(!acc[month]) acc[month] = { month, employees: [item] }\n\t\telse acc[month].employees.push(item)\n\t\treturn acc\n\t}, {})\n\n\tconst result = Object.values(data)\n\treturn result\n}\n\nexport const addCheckBoxField = arrayOfObjects => {\n\tfor (let item of arrayOfObjects) {\n\t\tfor (let person of item.employees) {\n\t\t\tperson.checked = false\n\t\t}\n\t}\n\treturn arrayOfObjects\n}\n\nexport const selectCheckedUsers = (arrayOfObjects) => {\n\tconst result = []\n\n\tfor (let group of arrayOfObjects) {\n\t\tif (group.employees.length) {\n\t\t\tfor (let employee of group.employees) {\n\t\t\t\tif (employee.checked) result.push(employee)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result\n}\n\nexport const getMonthFromDate = dateOfBirth => {\n\tconst date = new Date(dateOfBirth)\n\treturn months[date.getMonth()]\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst CheckBox = props => {\n\n\tconst { label, ...rest } = props\n\n\treturn <>\n\t\t<input\n\t\t\ttype=\"checkbox\"\n\t\t\t{ ...rest }\n\t\t/>\n\t\t<label htmlFor={rest.id}>\n\t\t\t{label}\n\t\t</label>\n\t</>\n}\n\nCheckBox.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tname: PropTypes.string.isRequired,\n\tchecked: PropTypes.bool.isRequired,\n\tlabel: PropTypes.string\n}\n\nexport default CheckBox\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { setEmployeeCheckedStatus } from '../reducers/employeesReducer'\n\nimport CheckBox from './CheckBox'\n\nconst EmployeesByChar = ({ letter, list }) => {\n\n\tconst dispatch = useDispatch()\n\n\tconst checkEmployee = (letter, id) => {\n\t\tdispatch(setEmployeeCheckedStatus(letter, id))\n\t}\n\n\treturn <>\n\t\t<div className=\"employees-by-letter\">\n\t\t\t<h2>{letter}</h2>\n\t\t\t<ul className=\"employee-list\">\n\t\t\t\t{list.length\n\t\t\t\t\t? list.map(employee =>\n\t\t\t\t\t\t<li key={employee.id}>\n\t\t\t\t\t\t\t<span className=\"employee-name\">\n\t\t\t\t\t\t\t\t{employee.lastName} {employee.firstName}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span className=\"checkbox-container\">\n\t\t\t\t\t\t\t\t<CheckBox\n\t\t\t\t\t\t\t\t\tid={employee.id}\n\t\t\t\t\t\t\t\t\tname={employee.id}\n\t\t\t\t\t\t\t\t\tchecked={employee.checked}\n\t\t\t\t\t\t\t\t\tlabel={employee.checked ? 'checked' : ''}\n\t\t\t\t\t\t\t\t\taria-label={`check-employee-${employee.lastName}`}\n\t\t\t\t\t\t\t\t\tonChange={() => checkEmployee(letter, employee.id)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</li>)\n\t\t\t\t\t: <>-----</>\n\t\t\t\t}\n\t\t\t</ul>\n\t\t</div>\n\t</>\n}\n\nEmployeesByChar.propTypes = {\n\tletter: PropTypes.string.isRequired,\n\tlist: PropTypes.array.isRequired\n}\n\nexport default EmployeesByChar\n","import React from 'react'\nimport EmployeesByChar from './EmployeesByChar'\n\nconst EmployeesList = ({ groups }) => {\n\treturn <>\n\t\t<section className=\"employees-section\">\n\t\t\t<h1>Employees</h1>\n\t\t\t{groups && groups.map(group =>\n\t\t\t\t<EmployeesByChar\n\t\t\t\t\tkey={group.letter}\n\t\t\t\t\tletter={group.letter}\n\t\t\t\t\tlist={group.employees}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</section>\n\t</>\n}\n\nexport default EmployeesList\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { selectCheckedUsers, sortByMonth,\n\tgroupByMonth, getMonthFromDate } from '../utils/helpers'\n\nconst BirtdayList = () => {\n\n\tconst employees = useSelector(state => state.employees)\n\tconst [checkedUsers, setCheckedUsers] = useState([])\n\tconst [groupedEmployees, setGroupedEmployees] = useState([])\n\n\tuseEffect(() => {\n\t\tif (employees) {\n\t\t\tsetCheckedUsers(selectCheckedUsers(employees))\n\t\t}\n\t}, [employees])\n\n\tuseEffect(() => {\n\t\tif (checkedUsers.length) {\n\t\t\tconst grouped = groupByMonth(checkedUsers)\n\t\t\tsetGroupedEmployees(sortByMonth(grouped))\n\t\t} else setGroupedEmployees([])\n\t}, [checkedUsers])\n\n\tconst formatDateOfBirth = date => {\n\t\tconst birthday = new Date(Date.parse(date))\n\n\t\t// to get \"31 March, 1977 year\" as stated in the requirement\n\t\tconst day = birthday.getDate()\n\t\tconst month = getMonthFromDate(birthday)\n\t\tconst year = birthday.getFullYear()\n\n\t\treturn <span>{day} {month}, {year} year</span>\n\n\t\t// but I'd rather do it like this:\n\t\t// \"March 31, 1977 year\"\n\t\t/* const options = {\n\t\t\tyear: 'numeric',\n\t\t\tmonth: 'long',\n\t\t\tday: 'numeric'\n\t\t}\n\t\treturn <span>{birthday.toLocaleString('en-us', options)} year</span> */\n\t}\n\n\treturn <section className=\"birthdays-section\">\n\t\t<h1>Employees birthday</h1>\n\t\t{groupedEmployees.length\n\t\t\t? groupedEmployees.map(group =>\n\t\t\t\t<div key={group.month} className=\"month-group\">\n\t\t\t\t\t<h2>{group.month}</h2>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{group.employees.map(person =>\n\t\t\t\t\t\t\t<li key={person.id}>\n\t\t\t\t\t\t\t\t{person.lastName} {person.firstName}{' '}\n\t\t\t\t\t\t\t\t- {formatDateOfBirth(person.dob)}\n\t\t\t\t\t\t\t</li>)}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t)\n\t\t\t: <span>No selected employees</span>}\n\t</section>\n}\n\nexport default BirtdayList\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { setEmployeesArray } from '../reducers/employeesReducer'\nimport employeesService from '../services/employees'\nimport localStorageHelper from '../utils/localStorageHelper'\nimport { sortByProperty, getEmptyGroups, groupByLetter,\n\texpiresInDays, addCheckBoxField } from '../utils/helpers'\n\nimport EmployeesList from './EmployeesList'\nimport BirtdaysList from './BirthdaysList'\n\nconst Employees = () => {\n\n\tconst dispatch = useDispatch()\n\tconst employees = useSelector(state => state.employees)\n\tconst [employeeGroups, setEmployeeGroups] = useState(null)\n\n\tconst prepareUserData = useCallback((arrayOfEmployees) => {\n\t\tconst sorted = sortByProperty('lastName', arrayOfEmployees)\n\t\tconst grouped = groupByLetter(sorted)\n\t\tconst withCheckBoxes = addCheckBoxField(grouped)\n\t\tconst emptyGroups = getEmptyGroups(withCheckBoxes)\n\t\tconst allGroups = sortByProperty('letter', grouped.concat(emptyGroups))\n\n\t\treturn allGroups\n\t}, [])\n\n\tuseEffect(() => {\n\t\tconst expirationDate = localStorageHelper.getEmployeesObjectProperty('expirationDate')\n\t\tif (!expirationDate || (Date.now() > expirationDate)) {\n\t\t\t// not set or expired\n\t\t\temployeesService.getAllEmployees()\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t\tconst parsedData = prepareUserData(data)\n\t\t\t\t\tdispatch(setEmployeesArray(parsedData))\n\t\t\t\t\tlocalStorageHelper.setEmployeesObject({\n\t\t\t\t\t\temployees: parsedData,\n\t\t\t\t\t\texpirationDate: expiresInDays(7)\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tconsole.error(error.message)\n\t\t\t\t})\n\t\t} else { // restore saved state\n\t\t\tconst savedState = localStorageHelper.getEmployeesObjectProperty('employees')\n\t\t\tdispatch(setEmployeesArray(savedState))\n\t\t}\n\t}, [dispatch, prepareUserData])\n\n\tuseEffect(() => {\n\t\t// on change, update view\n\t\tsetEmployeeGroups(employees)\n\t\t// save current state to LS\n\t\tlocalStorageHelper.updateEmployeesObject(employees)\n\t}, [employees] )\n\n\treturn <div style={{ display: 'flex' }}>\n\t\t{employees && <>\n\t\t\t<EmployeesList groups={employeeGroups}/>\n\t\t\t<BirtdaysList />\n\t\t</>}\n\t</div>\n\n}\n\nexport default Employees\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Home, Employees } from './components'\n\nexport const App = () => {\n\treturn <Router>\n\t\t<Switch>\n\t\t\t<Route path=\"/employees\">\n\t\t\t\t<Employees />\n\t\t\t</Route>\n\t\t\t<Route path=\"/\">\n\t\t\t\t<Home />\n\t\t\t</Route>\n\t\t</Switch>\n\t</Router>\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/store'\nimport './css/index.css'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}